generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CREATOR
  USER
}

enum Status {
  PENDING
  ACCEPTED
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  fullName String

  email         String   @unique
  emailVerified Boolean? @default(false)

  role Role @default(USER)

  alias     String  @unique
  position  String?
  promotion String?

  departmentId String?     @db.ObjectId
  department   Department? @relation(fields: [departmentId], references: [id])

  degree   Degree? @relation(fields: [degreeId], references: [id])
  degreeId String? @db.ObjectId

  academicCourse String?
  passwordHash   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Requests Request[]

  involvedAsStudentIDs String[]  @db.ObjectId
  involvedAsStudent    Project[] @relation(fields: [involvedAsStudentIDs], references: [id], name: "involvedAsStudent")

  involvedAsProfessorIDs String[]  @db.ObjectId
  involvedAsProfessor    Project[] @relation(fields: [involvedAsProfessorIDs], references: [id], name: "involvedAsProfessor")

  @@map("users")
}

model Project {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  type              String
  status            Status      @default(PENDING)
  description       String
  differentiator    String?
  Department        Department? @relation(fields: [departmentId], references: [id])
  departmentId      String?     @db.ObjectId
  subject           String?
  personalProject   Boolean
  academicCourse    String
  course            String
  letter            String


  impliedStudents    User[]   @relation(fields: [impliedStudentsIDs], references: [id], name: "involvedAsStudent")
  impliedStudentsIDs String[] @db.ObjectId

  impliedProfessors    String[] @db.ObjectId
  impliedProfessorsIDs User[]   @relation(fields: [impliedProfessors], references: [id], name: "involvedAsProfessor")

  summary       String?
  report        String?
  externalLinks String[]
  awards        String[]
  keywords      String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("projects")
}

model Degree {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  area         String
  department   String
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?     @db.ObjectId

  Users User[]

  @@map("degrees")
}

model Department {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  area        String
  coordinator String
  degrees     Degree[]
  Projects    Project[]
  Users       User[]

  @@map("departments")
}

model Request {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  projectTitle   String
  requester      User     @relation(fields: [requesterId], references: [id])
  description    String
  academicCourse String
  state          String
  requesterId    String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("requests")
}
